from __future__ import annotations
from datetime import datetime, date
from enum import Enum
from typing import List, Dict, Optional, Any
from pydantic import BaseModel as BaseModel, Field
from linkml_runtime.linkml_model import Decimal

metamodel_version = "None"
version = "None"

class WeakRefShimBaseModel(BaseModel):
   __slots__ = '__weakref__'
    
class ConfiguredBaseModel(WeakRefShimBaseModel,
                validate_assignment = True, 
                validate_all = True, 
                underscore_attrs_are_private = True, 
                extra = 'forbid', 
                arbitrary_types_allowed = True):
    pass                    


class MicrotraitTraitStrategyEnum(str, Enum):
    
    Resource_Use = "Resource Use"
    Stress_Tolerance = "Stress Tolerance"
    Resource_Acquisition = "Resource Acquisition"
    
    

class MicrotraitTraitTypeEnum(str, Enum):
    
    count = "count"
    binary = "binary"
    
    

class MicrotraitTraitVersionEnum(str, Enum):
    
    production = "production"
    
    

class TraitDocument(ConfiguredBaseModel):
    
    traits: Optional[List[Trait]] = Field(default_factory=list)
    


class Trait(ConfiguredBaseModel):
    
    microtrait_trait_name: Optional[str] = Field(None)
    microtrait_trait_displaynameshort: Optional[str] = Field(None)
    microtrait_trait_displaynamelong: Optional[str] = Field(None)
    microtrait_trait_strategy: Optional[MicrotraitTraitStrategyEnum] = Field(None)
    microtrait_trait_type: Optional[MicrotraitTraitTypeEnum] = Field(None)
    microtrait_trait_granularity: Optional[int] = Field(None)
    microtrait_trait_version: Optional[MicrotraitTraitVersionEnum] = Field(None)
    microtrait_trait_displayorder: Optional[int] = Field(None)
    



# Update forward refs
# see https://pydantic-docs.helpmanual.io/usage/postponed_annotations/
TraitDocument.update_forward_refs()
Trait.update_forward_refs()

